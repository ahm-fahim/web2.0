/*
JavaScript Operator Precedence
Operator precedence describes the order in which operations are performed in an arithmetic expression.

Multiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-).
*/

let x = (100 + 50) * 3;
console.log(x);
/*

Operator Precedence Values
Expressions in parentheses are computed before the rest of the expression
Function are executed before the result is used in the rest of the expression
Val	Operator	                      Description	                Example
18	( )	                      Expression Grouping	                (100 + 50) * 3
___________________________________________________________________________________
17	.	                      Member Of	person.name
___________________________________________________________________________________

17	[]	                      Member Of	person["name"]
___________________________________________________________________________________

17	?.	                      Optional Chaining ES2020	x ?. y
___________________________________________________________________________________

17	()	                      Function Call	myFunction()
___________________________________________________________________________________

17	new	                      New with Arguments	new Date("June 5,2022")
___________________________________________________________________________________

16	new	                      New without Arguments	new Date()
___________________________________________________________________________________

Increment Operators
Posfix increments are executed before prefix increments
___________________________________________________________________________________
___________________________________________________________________________________

15	++	                      Postfix Increment	i++
___________________________________________________________________________________

15	--	                      Postfix Decrement	i--
___________________________________________________________________________________

14	++	                      Prefix Increment	++i
___________________________________________________________________________________

14	--	                      Prefix Decrement	--i
___________________________________________________________________________________

NOT Operators
___________________________________________________________________________________
___________________________________________________________________________________

14	!	                      Logical NOT	!(x==y)
___________________________________________________________________________________

14	~	                      Bitwise NOT	~x
___________________________________________________________________________________

Unary Operators
___________________________________________________________________________________
___________________________________________________________________________________

14	+	                      Unary Plus	+x
___________________________________________________________________________________

14	-	                      Unary Minus	-x
___________________________________________________________________________________

14	typeof	Data Type	typeof x
___________________________________________________________________________________

14	void	Evaluate Void	void(0)
___________________________________________________________________________________
14	delete	Property Delete	delete myCar.color
___________________________________________________________________________________
Arithmetic Operators
Exponentiations are executed before multiplications
Multiplications and divisions are executed before additions and subtractions
_________________________________________________________________________________
___________________________________________________________________________________
13	**	Exponentiation ES2016	10 ** 2
___________________________________________________________________________________
12	*	Multiplication	10 * 5
___________________________________________________________________________________
12	/	Division	10 / 5
___________________________________________________________________________________
12	%	Division Remainder	10 % 5
___________________________________________________________________________________
11	+	Addition	10 + 5
___________________________________________________________________________________
11	-	Subtraction	10 - 5
___________________________________________________________________________________
11	+	Concatenation	"John" + "Doe"
___________________________________________________________________________________
Shift Operators
___________________________________________________________________________________

___________________________________________________________________________________
10	<<	Shift Left	x << 2
___________________________________________________________________________________
10	>>	Shift Right (signed)	x >> 2
___________________________________________________________________________________
10	>>>	Shift Right (unsigned)	x >>> 2
___________________________________________________________________________________
Relational Operators
___________________________________________________________________________________
9	in	Property in Object	"PI" in Math
___________________________________________________________________________________
9	instanceof	Instance of Object	x instanceof Array
___________________________________________________________________________________
Comparison Operators
___________________________________________________________________________________
9	<	Less than	x < y 
___________________________________________________________________________________
9	<=	Less than or equal	x <= y
___________________________________________________________________________________
9	>	Greater than	x > y
___________________________________________________________________________________
9	>=	Greater than or equal	x >= Array
___________________________________________________________________________________
8	==	Equal	x == y
___________________________________________________________________________________
8	===	Strict equal	x === y
___________________________________________________________________________________
8	!=	Unequal	x != y
___________________________________________________________________________________
8	!==	Strict unequal	x !== y
___________________________________________________________________________________
Bitwise Operators
___________________________________________________________________________________
7	&	Bitwise AND	x & y
___________________________________________________________________________________
6	^	Bitwise XOR	x ^ y
___________________________________________________________________________________
5	|	Bitwise OR	x | y
___________________________________________________________________________________
Logical Operators
___________________________________________________________________________________
4	&&	Logical AND	x && y
___________________________________________________________________________________
3	||	Logical OR	x || y
___________________________________________________________________________________
3	??	Nullish Coalescing ES2020	x ?? y
___________________________________________________________________________________
Conditional (ternary) Operator
___________________________________________________________________________________
2	? :	Condition	? "yes" : "no"
___________________________________________________________________________________
Assignment Operators
Assignments are executed after other operations
___________________________________________________________________________________
2	=	Simple Assignment	x + y
___________________________________________________________________________________
2	:	Colon Assignment	x: 5
___________________________________________________________________________________
2	+=	Addition Assignment	x += y
___________________________________________________________________________________
2	-=	Subtraction Assignment	x -= y
___________________________________________________________________________________
2	*=	Multiplication Assignment	x *= y
___________________________________________________________________________________
2	**=	Exponentiation Assignment	x **= y
___________________________________________________________________________________
2	/=	Division Assignment	x /= y
___________________________________________________________________________________
2	%=	Remainder Assignment	x %= y
___________________________________________________________________________________
2	<<=	Left Shift Assignment	x <<= y
___________________________________________________________________________________
2	>>=	Right Shift Assignment	x >>= y
___________________________________________________________________________________
2	>>>=	Unsigned Right Shift	x >>>= y
___________________________________________________________________________________
2	&=	Bitwise AND Assignment	x &= y
___________________________________________________________________________________
2	|=	Bitwise OR Assignment	x |= y
___________________________________________________________________________________
2	^=	Bitwise XOR Assignment	x ^= y
___________________________________________________________________________________
2	&&=	Logical AND Assignment	x &= y
2	||=	Logical OR Assignment	x ||= y
___________________________________________________________________________________
2	=>	Arrow	x => y
___________________________________________________________________________________
2	yield	Pause / Resume	yield x
___________________________________________________________________________________
2	yield*	Delegate	yield* x
___________________________________________________________________________________
2	...	Spread	... x
___________________________________________________________________________________
1	,	Comma	x , y
___________________________________________________________________________________


*/